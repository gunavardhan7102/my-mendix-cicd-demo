// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaconnector.actions;

import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaSubscription;
import org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UInteger;
import static java.util.Objects.requireNonNull;
import static org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned.uint;
import java.util.concurrent.ExecutionException;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import opcuaconnector.impl.ClientManager;
import opcuaconnector.impl.ClientManager.Client;
import opcuaconnector.impl.MxLogger;
import opcuaconnector.proxies.Subscription;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class DeinitializeSubscription extends CustomJavaAction<java.lang.Void>
{
	/** @deprecated use serverConfiguration.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __serverConfiguration;
	private final opcuaconnector.proxies.ServerConfiguration serverConfiguration;
	/** @deprecated use subscriptionID.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __subscriptionID;
	private final opcuaconnector.proxies.Subscription subscriptionID;

	public DeinitializeSubscription(
		IContext context,
		IMendixObject _serverConfiguration,
		IMendixObject _subscriptionID
	)
	{
		super(context);
		this.__serverConfiguration = _serverConfiguration;
		this.serverConfiguration = _serverConfiguration == null ? null : opcuaconnector.proxies.ServerConfiguration.initialize(getContext(), _serverConfiguration);
		this.__subscriptionID = _subscriptionID;
		this.subscriptionID = _subscriptionID == null ? null : opcuaconnector.proxies.Subscription.initialize(getContext(), _subscriptionID);
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Validate request
		validateDeleteSubscriptionRequest(subscriptionID);

		// Create client
		Client client = ClientManager.getInstance().getOrCreateClient(serverConfiguration, getContext());

		// Do request
		opcDeleteSubscription(client, uint(subscriptionID.get_SubscriptionID()));

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DeinitializeSubscription";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(DeinitializeSubscription.class);

	private void validateDeleteSubscriptionRequest(Subscription mxSubscription) {
		requireNonNull(mxSubscription, "Subscription to delete cannot be empty");
		requireNonNull(mxSubscription.get_SubscriptionID(), "Subscription ID cannot be empty");
	}

	private void opcDeleteSubscription(Client client, UInteger subscriptionId) throws CoreException {
		try {
			UaSubscription opcSubscription = client.getUaClient().getSubscriptionManager().getSubscriptions().stream()
					.filter(subs -> subs.getSubscriptionId().equals(subscriptionId)).findFirst().orElse(null);
			if (opcSubscription != null) {
				client.getUaClient().getSubscriptionManager().deleteSubscription(subscriptionId).get();
				
				// Removed subscription from client
				client.getClientSubscriptionManager().removeSubscription(uint(subscriptionID.get_SubscriptionID()));
				return;
			}
			LOGGER.warn("Cannot delete a subscription that is not present on the client.");
			// Removed subscription from client
			client.getClientSubscriptionManager().removeSubscription(uint(subscriptionID.get_SubscriptionID()));
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			LOGGER.error("Cannot delete subscription with id" + subscriptionId
					+ " because the thread was interrupted. The error was " + e);
			throw new CoreException(e);
		} catch (ExecutionException e) {
			LOGGER.error("Cannot delete subscription with id" + subscriptionId + " because " + e);
			throw new CoreException(e);
		}

	}
	// END EXTRA CODE
}
