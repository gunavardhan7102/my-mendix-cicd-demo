// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaconnector.actions;

import java.util.List;
import org.eclipse.milo.opcua.stack.core.types.builtin.ByteString;
import org.eclipse.milo.opcua.stack.core.types.enumerated.UserTokenType;
import org.eclipse.milo.opcua.stack.core.types.structured.EndpointDescription;
import org.eclipse.milo.opcua.stack.core.types.structured.UserTokenPolicy;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import opcuaconnector.impl.ENUMMessageSecurityMode;
import opcuaconnector.impl.MxApplicationDescriptionFactory;
import opcuaconnector.impl.MxApplicationDescriptionFactory.ApplicationDescriptionType;
import opcuaconnector.impl.OpcDiscoveryServiceSet;
import opcuaconnector.proxies.GetEndpointsRequest;
import opcuaconnector.proxies.GetEndpointsResponse;
import opcuaconnector.proxies.Server;
import opcuaconnector.proxies.UserIdentityToken;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import static java.util.Objects.requireNonNull;
import java.util.ArrayList;
import java.util.Base64;

/**
 * Finds extensive enpoint descriptions for a given endpoint URL.
 * This may throw an error when the input is invalid or the endpoints cannot be found.
 */
public class GetEndpoints extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use getEndpointsRequest.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __getEndpointsRequest;
	private final opcuaconnector.proxies.GetEndpointsRequest getEndpointsRequest;

	public GetEndpoints(
		IContext context,
		IMendixObject _getEndpointsRequest
	)
	{
		super(context);
		this.__getEndpointsRequest = _getEndpointsRequest;
		this.getEndpointsRequest = _getEndpointsRequest == null ? null : opcuaconnector.proxies.GetEndpointsRequest.initialize(getContext(), _getEndpointsRequest);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE

		// Validation
		validateGetEndpointsRequest(getEndpointsRequest);

		// Do request
		List<EndpointDescription> opcEndpointDescriptionList = new OpcDiscoveryServiceSet()
				.miloGetEndpoints(getEndpointsRequest.getEndpointURL());

		// Convert to Mendix Objects
		GetEndpointsResponse mxGetEndpointResponse = createMxGetEndpointResponse(context(), opcEndpointDescriptionList);

		// Return Mendix root object
		return mxGetEndpointResponse.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetEndpoints";
	}

	// BEGIN EXTRA CODE
	private void validateGetEndpointsRequest(GetEndpointsRequest getEndpointsRequest) {
		requireNonNull(getEndpointsRequest, "The Endpoint request cannot be empty");
		requireNonNull(getEndpointsRequest.getEndpointURL(), "The endpoint url cannot be empty");
		if (getEndpointsRequest.getEndpointURL().isBlank()) {
			throw new IllegalArgumentException("The endpoint url cannot be blank");
		}
	}

	private GetEndpointsResponse createMxGetEndpointResponse(IContext context,
			List<EndpointDescription> opcEndpointDescriptionList) throws CoreException {
		GetEndpointsResponse mxGetEndpointResponse = new GetEndpointsResponse(context);
		List<opcuaconnector.proxies.EndpointDescription> mxEndpointDescriptionList = new ArrayList<>();
		for (EndpointDescription opcEndpointDescription : opcEndpointDescriptionList) {
			mxEndpointDescriptionList.add(createMxEndpointResponse(context, opcEndpointDescription));
		}
		mxGetEndpointResponse.setGetEndpointsResponse_EndpointDescription(mxEndpointDescriptionList);
		return mxGetEndpointResponse;
	}

	private opcuaconnector.proxies.EndpointDescription createMxEndpointResponse(IContext context,
			EndpointDescription opcEndpointDescription) throws CoreException {
		opcuaconnector.proxies.EndpointDescription mxEndpointDescription = new opcuaconnector.proxies.EndpointDescription(
				context);
		List<UserIdentityToken> mxUserIdentityTokenList = new ArrayList<>();
		for (UserTokenPolicy opcUserIdentityTokenPolicies : opcEndpointDescription.getUserIdentityTokens()) {
			mxUserIdentityTokenList.add(createMxUserIdentityToken(opcUserIdentityTokenPolicies, context));
		}
		mxEndpointDescription.setEndpointDescription_UserIdentityToken(mxUserIdentityTokenList);
		mxEndpointDescription.setEndpointURL(opcEndpointDescription.getEndpointUrl());
		mxEndpointDescription.setSecurityLevel(opcEndpointDescription.getSecurityLevel().toBigInteger().intValue());
		mxEndpointDescription.setSecurityMode(
				ENUMMessageSecurityMode.toMxMessageSecurityMode(opcEndpointDescription.getSecurityMode()));
		mxEndpointDescription.setSecurityPolicyURI(opcEndpointDescription.getSecurityPolicyUri());
		mxEndpointDescription.setTransportProfileURI(opcEndpointDescription.getTransportProfileUri());
		mxEndpointDescription
				.setServerCertificate(base64EncodeCertificate(opcEndpointDescription.getServerCertificate()));
		mxEndpointDescription.setEndpointDescription_Server(
				(Server) new MxApplicationDescriptionFactory(ApplicationDescriptionType.GET_ENDPOINTS,
						opcEndpointDescription.getServer(), context).getApplicationDescription());
		return mxEndpointDescription;
	}

	private String base64EncodeCertificate(ByteString opcCertificate) {
		return Base64.getEncoder().encodeToString(opcCertificate.bytes());
	}

	private UserIdentityToken createMxUserIdentityToken(UserTokenPolicy opcUserIdentityTokenPolicy, IContext context) {
		UserIdentityToken mxUserIdentityToken = new UserIdentityToken(context);
		mxUserIdentityToken.setIssuerEndpointURL(opcUserIdentityTokenPolicy.getIssuerEndpointUrl());
		mxUserIdentityToken.setIssuedTokenType(opcUserIdentityTokenPolicy.getIssuedTokenType());
		mxUserIdentityToken.setPolicyId(opcUserIdentityTokenPolicy.getPolicyId());
		mxUserIdentityToken.setSecurityPolicyURI(opcUserIdentityTokenPolicy.getSecurityPolicyUri());
		mxUserIdentityToken.setTokenType(toMxUserTokenType(opcUserIdentityTokenPolicy.getTokenType()));
		return mxUserIdentityToken;
	}

	private opcuaconnector.proxies.ENUM_UserTokenType toMxUserTokenType(UserTokenType opcUserTokenType) {
		switch (opcUserTokenType) {
		case Anonymous:
			return opcuaconnector.proxies.ENUM_UserTokenType.ANONYMOUS;
		case Certificate:
			return opcuaconnector.proxies.ENUM_UserTokenType.CERTIFICATE;
		case IssuedToken:
			return opcuaconnector.proxies.ENUM_UserTokenType.ISSUEDTOKEN;
		case UserName:
			return opcuaconnector.proxies.ENUM_UserTokenType.USERNAME;
		default:
			return null;
		}
	}
	// END EXTRA CODE
}
