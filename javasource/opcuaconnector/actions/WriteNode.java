// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaconnector.actions;

import static java.util.Objects.requireNonNull;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import org.eclipse.milo.opcua.stack.core.types.builtin.StatusCode;
import org.eclipse.milo.opcua.stack.core.types.structured.WriteResponse;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import opcuaconnector.impl.ClientManager;
import opcuaconnector.impl.MxStatusCodeFactory;
import opcuaconnector.impl.OpcAttributeServiceSet;
import opcuaconnector.impl.MxStatusCodeFactory.StatusCodeType;
import opcuaconnector.proxies.WriteNodeRequest;
import opcuaconnector.proxies.WriteNodeResponse;
import opcuaconnector.proxies.WriteNodeStatusCode;
import opcuaconnector.proxies.WriteResponseWriteValue;
import opcuaconnector.proxies.WriteNodeWriteValue;

public class WriteNode extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use serverConfiguration.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __serverConfiguration;
	private final opcuaconnector.proxies.ServerConfiguration serverConfiguration;
	/** @deprecated use writeNodeRequest.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __writeNodeRequest;
	private final opcuaconnector.proxies.WriteNodeRequest writeNodeRequest;

	public WriteNode(
		IContext context,
		IMendixObject _serverConfiguration,
		IMendixObject _writeNodeRequest
	)
	{
		super(context);
		this.__serverConfiguration = _serverConfiguration;
		this.serverConfiguration = _serverConfiguration == null ? null : opcuaconnector.proxies.ServerConfiguration.initialize(getContext(), _serverConfiguration);
		this.__writeNodeRequest = _writeNodeRequest;
		this.writeNodeRequest = _writeNodeRequest == null ? null : opcuaconnector.proxies.WriteNodeRequest.initialize(getContext(), _writeNodeRequest);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Validation
		validateWriteNodeRequest(writeNodeRequest);

		// Create connected client
		OpcUaClient client = ClientManager.getInstance().getOrCreateClient(serverConfiguration, context())
				.getUaClient();

		// Get
		List<WriteNodeWriteValue> mxWriteNodeWriteValueList = writeNodeRequest
				.getWriteNodeRequest_WriteNodeWriteValue();

		// Do OPC request
		WriteResponse opcWriteNodeResponse = new OpcAttributeServiceSet(client)
				.miloWriteMxImplementation(mxWriteNodeWriteValueList);

		// Convert to Mendix Objects
		WriteNodeResponse mxWriteNodeResponse = createWriteNodeResponse(opcWriteNodeResponse, mxWriteNodeWriteValueList,
				getContext());

		return mxWriteNodeResponse.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "WriteNode";
	}

	// BEGIN EXTRA CODE
	private void validateWriteNodeRequest(WriteNodeRequest mxWriteNodeRequest) throws CoreException {
		requireNonNull(mxWriteNodeRequest, "The write node request cannot be empty");
		List<WriteNodeWriteValue> mxWriteNodeWriteValueList = mxWriteNodeRequest
				.getWriteNodeRequest_WriteNodeWriteValue();
		for (WriteNodeWriteValue writeNodeWriteValue : mxWriteNodeWriteValueList) {
			requireNonNull(writeNodeWriteValue.getNodeID(), "The Node id cannot be empty");
			if (writeNodeWriteValue.getNodeID().isEmpty()) {
				throw new IllegalArgumentException("The Node id cannot be blank");
			}
			requireNonNull(writeNodeWriteValue.getPayload(), "The payload on the node cannot be empty");
			if (writeNodeWriteValue.getPayload().isBlank()) {
				throw new IllegalArgumentException("The payload on the node cannot be blank");
			}
			if (writeNodeWriteValue.getAttributeId() == null) {
				throw new NullPointerException("Attribute Id cannot be empty");
			}
		}
	}

	private WriteNodeResponse createWriteNodeResponse(WriteResponse opcWriteNodeResponse,
			List<WriteNodeWriteValue> mxWriteNodeWriteValueList, IContext context) {
		WriteNodeResponse mxWriteNodeResponse = new WriteNodeResponse(context);
		StatusCode[] opcStatusCodeList = opcWriteNodeResponse.getResults();
		List<WriteNodeStatusCode> mxWriteNodeStatusCodeList = createMxWriteNodeStatusCodeList(opcStatusCodeList,
				mxWriteNodeWriteValueList, context);
		mxWriteNodeResponse.setWriteNodeResponse_WriteNodeStatusCode(mxWriteNodeStatusCodeList);
		return mxWriteNodeResponse;
	}

	private List<WriteNodeStatusCode> createMxWriteNodeStatusCodeList(StatusCode[] opcStatusCodeList,
			List<WriteNodeWriteValue> mxWriteNodeWriteValueList, IContext context) {
		if (opcStatusCodeList.length != mxWriteNodeWriteValueList.size()) {
			throw new IllegalArgumentException(
					"The number of status codes from the server does not match the number of written values requested");
		}
		List<WriteNodeStatusCode> mxWriteNodeStatusCodeList = new ArrayList<>();
		for (int i = 0; i < opcStatusCodeList.length; i++) {
			WriteNodeWriteValue writeNodeWriteValueToCopy = mxWriteNodeWriteValueList.get(i);
			WriteNodeStatusCode mxWriteNodeStatusCode = createMxWriteNodeStatusCode(opcStatusCodeList[i],
					writeNodeWriteValueToCopy, context);
			mxWriteNodeStatusCodeList.add(mxWriteNodeStatusCode);
		}
		return mxWriteNodeStatusCodeList;
	}

	private WriteNodeStatusCode createMxWriteNodeStatusCode(StatusCode opcStatusCode,
			WriteNodeWriteValue writeNodeWriteValueToCopy, IContext context) {
		WriteNodeStatusCode mxWriteNodeStatusCode = (WriteNodeStatusCode) new MxStatusCodeFactory(
				MxStatusCodeFactory.StatusCodeType.WRITE_NODE_RESPONSE, opcStatusCode, context).getStatusCode();
		mxWriteNodeStatusCode.setWriteNodeStatusCode_WriteResponseWriteValue(
				cloneToWriteResponseWriteValue(writeNodeWriteValueToCopy, context));
		return mxWriteNodeStatusCode;
	}

	private WriteResponseWriteValue cloneToWriteResponseWriteValue(WriteNodeWriteValue writeNodeWriteValueToCopy,
			IContext context) {
		WriteResponseWriteValue mxWriteResponseWriteValue = new WriteResponseWriteValue(context);
		mxWriteResponseWriteValue.setNodeID(writeNodeWriteValueToCopy.getNodeID());
		mxWriteResponseWriteValue.setAttributeId(writeNodeWriteValueToCopy.getAttributeId());
		mxWriteResponseWriteValue.setIndexRange(writeNodeWriteValueToCopy.getIndexRange());
		return mxWriteResponseWriteValue;
	}
	// END EXTRA CODE
}
