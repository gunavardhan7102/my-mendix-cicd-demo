// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaconnector.actions;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import static org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned.uint;
import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaMonitoredItem;
import org.eclipse.milo.opcua.stack.core.types.builtin.StatusCode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import opcuaconnector.impl.ClientManager;
import opcuaconnector.impl.ClientManager.Client;
import opcuaconnector.impl.ClientSubscriptionManager;
import opcuaconnector.impl.MxLogger;
import opcuaconnector.impl.ClientSubscriptionManager.MonitoredItemManager;
import opcuaconnector.impl.MxStatusCodeFactory;
import opcuaconnector.impl.MxStatusCodeFactory.StatusCodeType;
import opcuaconnector.impl.OpcMonitoredItemServiceSet;
import opcuaconnector.proxies.MonitoredItem;
import opcuaconnector.proxies.MonitoredItemStatusCode;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import static java.util.Objects.requireNonNull;

public class DeleteMonitoredItems extends CustomJavaAction<java.util.List<IMendixObject>>
{
	/** @deprecated use serverConfiguration.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __serverConfiguration;
	private final opcuaconnector.proxies.ServerConfiguration serverConfiguration;
	/** @deprecated use subscription.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __subscription;
	private final opcuaconnector.proxies.Subscription subscription;
	/** @deprecated use com.mendix.utils.ListUtils.map(monitoredItemList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __monitoredItemList;
	private final java.util.List<opcuaconnector.proxies.MonitoredItem> monitoredItemList;

	public DeleteMonitoredItems(
		IContext context,
		IMendixObject _serverConfiguration,
		IMendixObject _subscription,
		java.util.List<IMendixObject> _monitoredItemList
	)
	{
		super(context);
		this.__serverConfiguration = _serverConfiguration;
		this.serverConfiguration = _serverConfiguration == null ? null : opcuaconnector.proxies.ServerConfiguration.initialize(getContext(), _serverConfiguration);
		this.__subscription = _subscription;
		this.subscription = _subscription == null ? null : opcuaconnector.proxies.Subscription.initialize(getContext(), _subscription);
		this.__monitoredItemList = _monitoredItemList;
		this.monitoredItemList = java.util.Optional.ofNullable(_monitoredItemList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(monitoredItemListElement -> opcuaconnector.proxies.MonitoredItem.initialize(getContext(), monitoredItemListElement))
			.collect(java.util.stream.Collectors.toList());
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Validate input
		validateInput(monitoredItemList);

		// Create client
		Client client = ClientManager.getInstance().getOrCreateClient(serverConfiguration, getContext());

		// Get stored subscription
		ClientSubscriptionManager clientSubscriptionManager = client.getClientSubscriptionManager();
		MonitoredItemManager monitoredItemManager = clientSubscriptionManager
				.getMonitoredItemManager(uint(subscription.get_SubscriptionID()));

		// Create request
		List<UaMonitoredItem> opcMonitoredItemsToDelete = getOpcMonitoredItemsToDeleteFromMonitoredItemManager(
				monitoredItemManager);

		// Do Request
		List<StatusCode> opcMonitoredItemsTodeleteResponse = new OpcMonitoredItemServiceSet(client,
				uint(subscription.get_SubscriptionID()), context())
				.opcDeleteMonitoredItems(opcMonitoredItemsToDelete);

		// Update locally stored monitored items
		return updateClient(clientSubscriptionManager, monitoredItemManager, opcMonitoredItemsTodeleteResponse);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DeleteMonitoredItems";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(DeleteMonitoredItems.class);

	private void validateInput(List<MonitoredItem> mxMonitoredItemList) {
		for (MonitoredItem monitoredItem : mxMonitoredItemList) {
			requireNonNull(monitoredItem.get_MonitoredItemID(),
					"Monitored item ID cannot be empty when deleting a monitored item");
		}
		requireNonNull(subscription.get_SubscriptionID(), "Subscription ID cannot be empty when deleting a monitored Item");
	}

	private List<UaMonitoredItem> getOpcMonitoredItemsToDeleteFromMonitoredItemManager(
			MonitoredItemManager subscription) {
		return subscription.getOpcMonitoredItems().stream().filter(opcItem -> {
			Optional<MonitoredItem> storedMonitoredItem = monitoredItemList.stream()
					.filter(monItem -> monItem.get_MonitoredItemID().equals(opcItem.getMonitoredItemId().longValue()))
					.findFirst();
			if (storedMonitoredItem.isPresent()) {
				return true;
			} else {
				LOGGER.warn("Cannot delete monitored item " + opcItem.getMonitoredItemId()
						+ " because it was not present.");
				return false;
			}
		}).collect(Collectors.toList());
	}

	private List<IMendixObject> updateClient(ClientSubscriptionManager clientSubscriptionManager,
			MonitoredItemManager storedSubscription, List<StatusCode> opcMonitoredItemsTodeleteResponse) {
		List<IMendixObject> mxStatusCodeList = new ArrayList<>();
		for (int i = 0; i < opcMonitoredItemsTodeleteResponse.size(); i++) {
			MonitoredItem monitoredItem = monitoredItemList.get(i);
			StatusCode opcStatusCode = opcMonitoredItemsTodeleteResponse.get(i);
			MonitoredItemStatusCode statusCode = (MonitoredItemStatusCode) new MxStatusCodeFactory(
					StatusCodeType.MONITOREDITEMSTATUSCODE, opcStatusCode, context()).getStatusCode();
			statusCode.setMonitoredItemStatusCode_MonitoredItem(monitoredItem);
			mxStatusCodeList.add(statusCode.getMendixObject());
			if (opcStatusCode.isGood()) {
				clientSubscriptionManager.removeMonitoredItem(storedSubscription.getOpcSubscription(), monitoredItem);
			}
		}
		return mxStatusCodeList;
	}
	// END EXTRA CODE
}
