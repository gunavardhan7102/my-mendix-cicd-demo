// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaconnector.actions;

import static java.util.Objects.requireNonNull;
import static org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.Unsigned.uint;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaMonitoredItem;
import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaSubscription;
import org.eclipse.milo.opcua.stack.core.types.builtin.StatusCode;
import org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UInteger;
import org.eclipse.milo.opcua.stack.core.types.structured.MonitoredItemCreateRequest;
import org.eclipse.milo.opcua.stack.core.types.structured.MonitoringParameters;
import org.eclipse.milo.opcua.stack.core.types.structured.ReadValueId;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import opcuaconnector.impl.ClientManager;
import opcuaconnector.impl.ClientSubscriptionManager;
import opcuaconnector.impl.ENUMAttributeId;
import opcuaconnector.impl.ENUMMonitoringMode;
import opcuaconnector.impl.MxStatusCodeFactory;
import opcuaconnector.impl.OpcMonitoredItemServiceSet;
import opcuaconnector.impl.OpcNode;
import opcuaconnector.impl.ClientManager.Client;
import opcuaconnector.impl.ClientSubscriptionManager.MonitoredItemManager;
import opcuaconnector.impl.MxStatusCodeFactory.StatusCodeType;
import opcuaconnector.proxies.MonitoredItem;
import opcuaconnector.proxies.MonitoredItemStatusCode;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class CreateMonitoredItems extends CustomJavaAction<java.util.List<IMendixObject>>
{
	/** @deprecated use serverConfiguration.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __serverConfiguration;
	private final opcuaconnector.proxies.ServerConfiguration serverConfiguration;
	/** @deprecated use subscription.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __subscription;
	private final opcuaconnector.proxies.Subscription subscription;
	private final java.lang.String microflowToCall;
	/** @deprecated use com.mendix.utils.ListUtils.map(monitoredItemList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __monitoredItemList;
	private final java.util.List<opcuaconnector.proxies.MonitoredItem> monitoredItemList;

	public CreateMonitoredItems(
		IContext context,
		IMendixObject _serverConfiguration,
		IMendixObject _subscription,
		java.lang.String _microflowToCall,
		java.util.List<IMendixObject> _monitoredItemList
	)
	{
		super(context);
		this.__serverConfiguration = _serverConfiguration;
		this.serverConfiguration = _serverConfiguration == null ? null : opcuaconnector.proxies.ServerConfiguration.initialize(getContext(), _serverConfiguration);
		this.__subscription = _subscription;
		this.subscription = _subscription == null ? null : opcuaconnector.proxies.Subscription.initialize(getContext(), _subscription);
		this.microflowToCall = _microflowToCall;
		this.__monitoredItemList = _monitoredItemList;
		this.monitoredItemList = java.util.Optional.ofNullable(_monitoredItemList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(monitoredItemListElement -> opcuaconnector.proxies.MonitoredItem.initialize(getContext(), monitoredItemListElement))
			.collect(java.util.stream.Collectors.toList());
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Validate input
		validateInput();
		// Get connected client
		Client client = ClientManager.getInstance().getOrCreateClient(serverConfiguration, getContext());

		// Get stored subscription
		ClientSubscriptionManager clientSubscriptionManager = client.getClientSubscriptionManager();
		MonitoredItemManager monitoredItemManager = clientSubscriptionManager
				.getMonitoredItemManager(uint(subscription.get_SubscriptionID()));
		// Create request
		List<MonitoredItemCreateRequest> opcMonitoredItemCreateRequest = createOpcMonitoredItemCreateRequest(
				monitoredItemList, monitoredItemManager);

		// Do request
		List<UaMonitoredItem> responseList = new OpcMonitoredItemServiceSet(client,
				uint(subscription.get_SubscriptionID()), context())
				.opcCreateMonitoredItems(opcMonitoredItemCreateRequest, microflowToCall);

		// Update input and return StatusCodes for each
		return updateMonitoredItems(responseList, monitoredItemManager, clientSubscriptionManager);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CreateMonitoredItems";
	}

	// BEGIN EXTRA CODE
	private void validateInput() {
		requireNonNull(monitoredItemList, "monitoredItemList cannot be empty");
		for (MonitoredItem monitoredItem : monitoredItemList) {
			requireNonNull(monitoredItem.getNodeID(), "Node ID cannot be empty");
			requireNonNull(monitoredItem.getAttributeID(),
					"Attribute ID cannot be empty for monitored item with node ID " + monitoredItem.getNodeID());
			requireNonNull(monitoredItem.getMicroflowName(),
					"Microflow name cannot be empty for monitored item with node ID " + monitoredItem.getNodeID());
			requireNonNull(monitoredItem.getMonitoringMode(),
					"Monitoring mode cannot be empty for monitored item with node ID " + monitoredItem.getNodeID());
			requireNonNull(monitoredItem.getSamplingInterval(),
					"Sampling interval cannot be empty for monitored item with node ID " + monitoredItem.getNodeID());
			if (monitoredItem.getSamplingInterval().signum() < 0) {
				throw new IllegalArgumentException(
						"Sampling interval cannot be negative for monitored item with node ID "
								+ monitoredItem.getNodeID());
			}
		}
		requireNonNull(subscription, "subscription cannot be empty");
		requireNonNull(serverConfiguration, "Server configuration cannot be empty");
	}

	private List<MonitoredItemCreateRequest> createOpcMonitoredItemCreateRequest(
			List<MonitoredItem> mxMonitoredItemList, MonitoredItemManager monitoredItemManager) throws CoreException {
		List<MonitoredItemCreateRequest> opcMonitoredItemCreateList = new ArrayList<>();
		for (MonitoredItem itemToCreate : mxMonitoredItemList) {
			opcMonitoredItemCreateList.add(new MonitoredItemCreateRequest(createOpcReadValueId(itemToCreate),
					ENUMMonitoringMode.getOpcENUM(itemToCreate.getMonitoringMode()),
					createOpcMonitoringParameters(monitoredItemManager.getOpcSubscription(), itemToCreate)));
		}
		return opcMonitoredItemCreateList;
	}

	private ReadValueId createOpcReadValueId(MonitoredItem itemToCreate) throws CoreException {
		return new ReadValueId(new OpcNode(itemToCreate.getNodeID()).getOpcNodeId(),
				ENUMAttributeId.getOpcENUM(itemToCreate.getAttributeID()).uid(), itemToCreate.getNumericRange(), null);
	}

	private MonitoringParameters createOpcMonitoringParameters(UaSubscription opcSubscription,
			MonitoredItem itemToCreate) {
		UInteger newClientHandle = opcSubscription.nextClientHandle();
		return new MonitoringParameters(newClientHandle,
				itemToCreate.getSamplingInterval() != null ? itemToCreate.getSamplingInterval().doubleValue() : null,
				null, itemToCreate.getQueueSize() != null ? uint(itemToCreate.getQueueSize()) : null,
				itemToCreate.getDiscardOldest());
	}

	private List<IMendixObject> updateMonitoredItems(List<UaMonitoredItem> opcMonitoredItemList,
			MonitoredItemManager monitoredItemManager, ClientSubscriptionManager clientSubscriptionManager) {
		List<IMendixObject> statusCodeList = new ArrayList<>();
		for (int i = 0; i < opcMonitoredItemList.size(); i++) {
			UaMonitoredItem opcMonitoredItem = opcMonitoredItemList.get(i);
			MonitoredItem mxMonitoredItem = monitoredItemList.get(i);
			MonitoredItemStatusCode statusCode = (MonitoredItemStatusCode) new MxStatusCodeFactory(
					StatusCodeType.MONITOREDITEMSTATUSCODE, opcMonitoredItem.getStatusCode(), context())
					.getStatusCode();
			statusCodeList.add(statusCode.getMendixObject());
			statusCode.setMonitoredItemStatusCode_MonitoredItem(mxMonitoredItem);
			if (opcMonitoredItem.getStatusCode().equals(StatusCode.GOOD)) {
				mxMonitoredItem.set_MonitoredItemID(opcMonitoredItem.getMonitoredItemId().longValue());
				mxMonitoredItem.setSamplingInterval(BigDecimal.valueOf(opcMonitoredItem.getRevisedSamplingInterval()));
				mxMonitoredItem.setQueueSize(opcMonitoredItem.getRevisedQueueSize().longValue());
				mxMonitoredItem.set_isActive(true);
				clientSubscriptionManager.addMonitoredItem(monitoredItemManager.getOpcSubscription(), opcMonitoredItem);
			} else {
				mxMonitoredItem.set_isActive(false);
			}
		}
		return statusCodeList;
	}
	// END EXTRA CODE
}
