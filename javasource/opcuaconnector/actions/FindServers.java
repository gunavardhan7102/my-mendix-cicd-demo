// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaconnector.actions;

import static java.util.Objects.requireNonNull;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.milo.opcua.stack.core.types.structured.ApplicationDescription;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import opcuaconnector.impl.MxApplicationDescriptionFactory;
import opcuaconnector.impl.OpcDiscoveryServiceSet;
import opcuaconnector.impl.MxApplicationDescriptionFactory.ApplicationDescriptionType;
import opcuaconnector.proxies.FindServersRequest;
import opcuaconnector.proxies.FindServersResponse;
import opcuaconnector.proxies.ServerApplicationDescription;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Finds the servers for a given endpoint URL.
 * This may throw an error when the input is invalid or the server could not be found.
 */
public class FindServers extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use findServerRequest.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __findServerRequest;
	private final opcuaconnector.proxies.FindServersRequest findServerRequest;

	public FindServers(
		IContext context,
		IMendixObject _findServerRequest
	)
	{
		super(context);
		this.__findServerRequest = _findServerRequest;
		this.findServerRequest = _findServerRequest == null ? null : opcuaconnector.proxies.FindServersRequest.initialize(getContext(), _findServerRequest);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Validation
		validateFindServerRequest(findServerRequest);

		// Do request
		List<ApplicationDescription> opcApplicationDescriptionList = new OpcDiscoveryServiceSet()
				.miloFindServers(findServerRequest.getEndpointURL());

		// Convert to Mendix Objects
		FindServersResponse mxFindServerResponse = createMxFindServerResponse(opcApplicationDescriptionList, context());

		// Return Mendix root object
		return mxFindServerResponse.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "FindServers";
	}

	// BEGIN EXTRA CODE
	private void validateFindServerRequest(FindServersRequest findServerRequest) {
		requireNonNull(findServerRequest, "The Find server request cannot be empty");
		requireNonNull(findServerRequest.getEndpointURL(), "The Endpoint URL cannot be empty");
		if (findServerRequest.getEndpointURL().isBlank()) {
			throw new IllegalArgumentException("The Endpoint URL cannot be blank");
		}
	}

	private FindServersResponse createMxFindServerResponse(List<ApplicationDescription> opcApplicationDescriptionList,
			IContext context) {
		FindServersResponse mxFindServerResponse = new FindServersResponse(context);
		List<ServerApplicationDescription> mxServerApplicationDescriptionList = new ArrayList<>();
		for (ApplicationDescription opcApplicationDescription : opcApplicationDescriptionList) {
			ServerApplicationDescription mxServerApplicationDescription = (ServerApplicationDescription) new MxApplicationDescriptionFactory(
					ApplicationDescriptionType.FIND_SERVER, opcApplicationDescription, context)
					.getApplicationDescription();
			mxServerApplicationDescriptionList.add(mxServerApplicationDescription);
		}
		mxFindServerResponse.setFindServersResponse_ServerApplicationDescription(mxServerApplicationDescriptionList);
		return mxFindServerResponse;
	}

	// END EXTRA CODE
}
