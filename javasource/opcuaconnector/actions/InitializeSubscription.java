// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaconnector.actions;

import static java.util.Objects.requireNonNull;
import java.math.BigDecimal;
import java.util.concurrent.ExecutionException;
import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaSubscription;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import opcuaconnector.impl.ClientManager;
import opcuaconnector.impl.ClientManager.Client;
import opcuaconnector.impl.MxLogger;
import opcuaconnector.proxies.Subscription;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class InitializeSubscription extends CustomJavaAction<java.lang.Void>
{
	/** @deprecated use serverConfiguration.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __serverConfiguration;
	private final opcuaconnector.proxies.ServerConfiguration serverConfiguration;
	/** @deprecated use subscription.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __subscription;
	private final opcuaconnector.proxies.Subscription subscription;

	public InitializeSubscription(
		IContext context,
		IMendixObject _serverConfiguration,
		IMendixObject _subscription
	)
	{
		super(context);
		this.__serverConfiguration = _serverConfiguration;
		this.serverConfiguration = _serverConfiguration == null ? null : opcuaconnector.proxies.ServerConfiguration.initialize(getContext(), _serverConfiguration);
		this.__subscription = _subscription;
		this.subscription = _subscription == null ? null : opcuaconnector.proxies.Subscription.initialize(getContext(), _subscription);
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Validate input
		validateCreateSubscriptionRequest(subscription);

		// Get client
		Client client = ClientManager.getInstance().getOrCreateClient(serverConfiguration, getContext());

		// Do request
		UaSubscription opcSubscription = createOpcSubscription(client,
				subscription.getPublishingInterval().doubleValue());

		// Update subscription object with Subscription ID and revised Publishing
		// interval
		updateMxSubscription(subscription, opcSubscription);

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "InitializeSubscription";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(InitializeSubscription.class);

	private void validateCreateSubscriptionRequest(Subscription mxSubscription) {
		requireNonNull(mxSubscription, "Subscription cannot be empty");
		requireNonNull(mxSubscription.getPublishingInterval(), "Requested publishing interval cannot be empty");
		if (mxSubscription.getPublishingInterval().signum() < 0) {
			throw new IllegalArgumentException("Requested publishing interval cannot be negative");
		}
	}

	private UaSubscription createOpcSubscription(Client client, double requestedPublishingInterval)
			throws CoreException {
		try {
			UaSubscription createdOpcSubscription = client.getUaClient().getSubscriptionManager()
					.createSubscription(requestedPublishingInterval).get();
			
			// adds the response to the client memory
			client.getClientSubscriptionManager().getOrCreateMonitoredItemManager(createdOpcSubscription);
			return createdOpcSubscription;
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			LOGGER.error("Cannot create a new subscription because the thread was interrupted. The error is " + e);
			throw new CoreException(e);
		} catch (ExecutionException e) {
			LOGGER.error("Cannot create a new subscription because " + e);
			throw new CoreException(e);
		}
	}

	private void updateMxSubscription(Subscription mxSubscription, UaSubscription opcSubscription) {
		mxSubscription.set_SubscriptionID(opcSubscription.getSubscriptionId().longValue());
		mxSubscription.setPublishingInterval(BigDecimal.valueOf(opcSubscription.getRevisedPublishingInterval()));
	}
	// END EXTRA CODE
}
