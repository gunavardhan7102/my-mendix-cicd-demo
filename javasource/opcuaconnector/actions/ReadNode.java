// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package opcuaconnector.actions;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import static java.util.Objects.requireNonNull;
import org.eclipse.milo.opcua.stack.core.types.builtin.DataValue;
import org.eclipse.milo.opcua.stack.core.types.builtin.QualifiedName;
import org.eclipse.milo.opcua.stack.core.types.structured.ReadResponse;
import org.eclipse.milo.opcua.stack.core.types.structured.ReadValueId;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import opcuaconnector.impl.ClientManager;
import opcuaconnector.impl.ENUMAttributeId;
import opcuaconnector.impl.ENUMTimestampsToReturn;
import opcuaconnector.impl.MxDataValueFactory;
import opcuaconnector.impl.OpcAttributeServiceSet;
import opcuaconnector.impl.OpcNode;
import opcuaconnector.impl.MxDataValueFactory.DataValueType;
import opcuaconnector.impl.MxReadValueIdFactory;
import opcuaconnector.impl.MxReadValueIdFactory.ReadValueIdType;
import opcuaconnector.proxies.ReadNodeReadValueId;
import opcuaconnector.proxies.ReadNodeRequest;
import opcuaconnector.proxies.ReadNodeResponse;
import opcuaconnector.proxies.ReadNodeResponseReadValueId;
import opcuaconnector.proxies.ReadNodeResponseResults;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class ReadNode extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use serverConfiguration.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __serverConfiguration;
	private final opcuaconnector.proxies.ServerConfiguration serverConfiguration;
	/** @deprecated use readNodeRequest.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __readNodeRequest;
	private final opcuaconnector.proxies.ReadNodeRequest readNodeRequest;

	public ReadNode(
		IContext context,
		IMendixObject _serverConfiguration,
		IMendixObject _readNodeRequest
	)
	{
		super(context);
		this.__serverConfiguration = _serverConfiguration;
		this.serverConfiguration = _serverConfiguration == null ? null : opcuaconnector.proxies.ServerConfiguration.initialize(getContext(), _serverConfiguration);
		this.__readNodeRequest = _readNodeRequest;
		this.readNodeRequest = _readNodeRequest == null ? null : opcuaconnector.proxies.ReadNodeRequest.initialize(getContext(), _readNodeRequest);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Validation
		validateReadNodeRequest(readNodeRequest);

		// Create connected client
		OpcUaClient opcClient = ClientManager.getInstance().getOrCreateClient(serverConfiguration, context())
				.getUaClient();

		// Create opc request
		List<ReadValueId> opcReadValueIdsToRead = getOpcReadValueIdsToRead(readNodeRequest);

		// Do request
		ReadResponse opcResponse = new OpcAttributeServiceSet(opcClient).miloRead(
				readNodeRequest.getMaxAge().doubleValue(),
				ENUMTimestampsToReturn.getOpcENUM(readNodeRequest.getTimestampsToReturn()), opcReadValueIdsToRead);

		// Convert to Mendix Objects
		ReadNodeResponse mxReadNodeResponse = createMxReadNodeResponse(opcResponse, opcReadValueIdsToRead, context());

		// Return Mendix root object
		return mxReadNodeResponse.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ReadNode";
	}

	// BEGIN EXTRA CODE
	private void validateReadNodeRequest(ReadNodeRequest mxReadNodeRequest) throws CoreException {
		requireNonNull(mxReadNodeRequest, "Read node request cannot be empty");
		requireNonNull(mxReadNodeRequest.getTimestampsToReturn(), "Timestamps to return cannot be empty");
		requireNonNull(mxReadNodeRequest.getMaxAge(), "Max age cannot be empty");
		if (mxReadNodeRequest.getMaxAge() < 0) {
			throw new IllegalArgumentException("Max age cannot be negative.");
		}
		if (mxReadNodeRequest.getReadNodeRequest_ReadNodeReadValueId().isEmpty()) {
			throw new NullPointerException("List of nodes to read cannot be empty");
		}
		for (ReadNodeReadValueId readvalueIdToRead : mxReadNodeRequest.getReadNodeRequest_ReadNodeReadValueId()) {
			requireNonNull(readvalueIdToRead.getNodeID(), "Node ID cannot be empty");
			requireNonNull(readvalueIdToRead.getAttributeId(),
					"Attribute ID is empty for node with ID " + readvalueIdToRead.getNodeID());
		}
	}

	/**
	 * To DO: Add support for dataEncoding, test numeric range. dataEncoding is only
	 * used for
	 * 
	 * @param mxReadNodeRequest
	 * @return
	 * @throws CoreException
	 */
	private List<ReadValueId> getOpcReadValueIdsToRead(ReadNodeRequest mxReadNodeRequest) throws CoreException {
		List<ReadValueId> opcReadValueIdsToRead = new ArrayList<>();
		for (ReadNodeReadValueId mxReadValueId : mxReadNodeRequest.getReadNodeRequest_ReadNodeReadValueId()) {
			opcReadValueIdsToRead.add(new ReadValueId(new OpcNode(mxReadValueId.getNodeID()).getOpcNodeId(),
					ENUMAttributeId.getOpcENUM(mxReadValueId.getAttributeId()).uid(), mxReadValueId.getNumericRange(),
					QualifiedName.NULL_VALUE));
		}
		return opcReadValueIdsToRead;
	}

	private ReadNodeResponse createMxReadNodeResponse(ReadResponse opcReadNodeResponse,
			List<ReadValueId> opcReadValueIdsRead, IContext context) {
		ReadNodeResponse mxReadNodeResponse = new ReadNodeResponse(context);
		List<DataValue> opcDataValueList = Arrays.asList(opcReadNodeResponse.getResults());
		List<ReadNodeResponseResults> mxReadNodeResponseValueList = createMxReadNodeResponseValueList(opcDataValueList,
				opcReadValueIdsRead, context);
		mxReadNodeResponse.setReadNodeResponse_ReadNodeResponseResults(mxReadNodeResponseValueList);
		return mxReadNodeResponse;
	}

	private List<ReadNodeResponseResults> createMxReadNodeResponseValueList(List<DataValue> opcDataValueList,
			List<ReadValueId> opcReadValueIdsRead, IContext context) {
		if (opcReadValueIdsRead.size() != opcDataValueList.size()) {
			throw new IllegalArgumentException(
					"The number of values read from the server does not match the number of values requested");
		}
		List<ReadNodeResponseResults> mxReadNodeResponseValueList = new ArrayList<>();
		for (int i = 0; i < opcDataValueList.size(); i++) {
			DataValue opcDataValue = opcDataValueList.get(i);
			ReadValueId opcReadValueId = opcReadValueIdsRead.get(i);
			ReadNodeResponseResults readNodeResponseResults = createReadNodeResponseResults(opcDataValue,
					opcReadValueId, context);
			mxReadNodeResponseValueList.add(readNodeResponseResults);
		}
		return mxReadNodeResponseValueList;
	}

	private ReadNodeResponseResults createReadNodeResponseResults(DataValue opcDataValue, ReadValueId opcReadValueId,
			IContext context) {
		ReadNodeResponseResults readNodeResponseResults = (ReadNodeResponseResults) new MxDataValueFactory(opcDataValue,
				DataValueType.READ_RESPONSE, context).getDataValue();
		readNodeResponseResults.setReadNodeResponseResults_ReadNodeResponseReadValueId(context,
				createMxReadNodeResponseReadValueId(opcReadValueId, context));
		return readNodeResponseResults;
	}

	private ReadNodeResponseReadValueId createMxReadNodeResponseReadValueId(ReadValueId opcReadValueId,
			IContext context) {
		return (ReadNodeResponseReadValueId) new MxReadValueIdFactory(opcReadValueId, ReadValueIdType.READNODERESPONSE,
				context).getReadValueId();
	}
	// END EXTRA CODE
}
